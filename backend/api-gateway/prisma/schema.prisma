// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(cuid())
  email     String   @unique
  password  String
  firstName String
  lastName  String
  role      UserRole @default(USER)
  isVerified Boolean @default(false)
  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  projects    Project[]    @relation("ProjectMembers")
  ownedProjects Project[]  @relation("ProjectOwner")
  documents   Document[]
  meetings    Meeting[]
  conversations Conversation[]
  sessions    Session[]
  activities  Activity[]

  @@map("users")
}

model Project {
  id          String   @id @default(cuid())
  name        String
  description String?
  client      String
  timeline    String?
  status      ProjectStatus @default(ACTIVE)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  ownerId     String
  owner       User     @relation("ProjectOwner", fields: [ownerId], references: [id])
  members     User[]   @relation("ProjectMembers")
  documents   Document[]
  meetings    Meeting[]
  conversations Conversation[]

  @@map("projects")
}

model Document {
  id          String   @id @default(cuid())
  name        String
  fileName    String
  filePath    String
  fileSize    Int
  fileType    String
  mimeType    String
  status      DocumentStatus @default(PROCESSING)
  metadata    Json?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  projectId   String
  project     Project  @relation(fields: [projectId], references: [id], onDelete: Cascade)
  uploadedById String
  uploadedBy  User     @relation(fields: [uploadedById], references: [id])

  @@map("documents")
}

model Meeting {
  id          String   @id @default(cuid())
  topic       String
  startTime   DateTime
  endTime     DateTime?
  duration    Int? // in minutes
  zoomMeetingId String?
  zoomJoinUrl String?
  status      MeetingStatus @default(SCHEDULED)
  recordingUrl String?
  transcription Json?
  metadata    Json?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  projectId   String
  project     Project  @relation(fields: [projectId], references: [id], onDelete: Cascade)
  createdById String
  createdBy   User     @relation(fields: [createdById], references: [id])

  @@map("meetings")
}

model Conversation {
  id          String   @id @default(cuid())
  query       String
  response    String
  model       String
  confidence  Float?
  sources     Json?
  createdAt   DateTime @default(now())

  // Relations
  projectId   String
  project     Project  @relation(fields: [projectId], references: [id], onDelete: Cascade)
  userId      String
  user        User     @relation(fields: [userId], references: [id])

  @@map("conversations")
}

model Session {
  id          String   @id @default(cuid())
  token       String   @unique
  expiresAt   DateTime
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())

  // Relations
  userId      String
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model Activity {
  id          String   @id @default(cuid())
  type        ActivityType
  description String
  metadata    Json?
  createdAt   DateTime @default(now())

  // Relations
  userId      String
  user        User     @relation(fields: [userId], references: [id])

  @@map("activities")
}

// Enums
enum UserRole {
  ADMIN
  MANAGER
  USER
}

enum ProjectStatus {
  ACTIVE
  COMPLETED
  ARCHIVED
  CANCELLED
}

enum DocumentStatus {
  PROCESSING
  COMPLETED
  FAILED
  DELETED
}

enum MeetingStatus {
  SCHEDULED
  IN_PROGRESS
  COMPLETED
  CANCELLED
}

enum ActivityType {
  LOGIN
  LOGOUT
  PROJECT_CREATED
  PROJECT_UPDATED
  DOCUMENT_UPLOADED
  MEETING_SCHEDULED
  AI_QUERY
}
